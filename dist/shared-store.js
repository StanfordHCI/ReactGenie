"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.displayResult = displayResult;
exports.executeGenieCode = executeGenieCode;
exports.useGenieSelector = exports.useGenieCodeSelector = exports.uiActive = void 0;
var _modalityProvider = require("./modality-provider");
var _reactDecorators = require("./react-decorators");
var _reactRedux = require("react-redux");
var _reactgenieDsl = require("reactgenie-dsl");
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
let uiActive = true;
exports.uiActive = uiActive;
const useGenieCodeSelector = command => {
  return state => {
    exports.uiActive = uiActive = false;
    console.log(`before executing state ${JSON.stringify(state)}`);
    (0, _reactgenieDsl.setSharedState)(state);
    const result = _modalityProvider.GenieInterpreter.dslInterpreter.interpret(command);
    console.log(`executed result ${result}`);
    console.log(`after executing state ${JSON.stringify(state)}`);
    exports.uiActive = uiActive = true;
    return result;
  };
};
exports.useGenieCodeSelector = useGenieCodeSelector;
const shallowEqualWithArray = (left, right) => {
  if (Array.isArray(left) && Array.isArray(right)) {
    if (left.length !== right.length) {
      return false;
    }
    for (let i = 0; i < left.length; i++) {
      if (!shallowEqualWithArray(left[i], right[i])) {
        return false;
      }
    }
    return true;
  } else {
    return (0, _reactRedux.shallowEqual)(left, right);
  }
};
const convertGenieClassToState = obj => {
  if (Array.isArray(obj)) {
    return obj.map(element => convertGenieClassToState(element));
  } else if (obj === null || obj === undefined || obj.constructor === undefined) {
    return obj;
  } else if (obj.constructor.prototype instanceof _reactgenieDsl.GenieObject) {
    if (obj.constructor.prototype instanceof _reactgenieDsl.DataClass) {
      return _objectSpread({
        __genieObjectType: "DataClass",
        __genieObjectClass: obj.constructor.name,
        __genieObjectKey: obj[obj.genieKey]
      }, obj.__getState());
    } else if (obj.constructor.prototype instanceof _reactgenieDsl.HelperClass) {
      return _objectSpread({
        __genieObjectType: "HelperClass",
        __genieObjectClass: obj.constructor.name
      }, obj.localStore);
    }
    throw new Error("Unknown GenieObject type");
  } else {
    return obj;
  }
};
const useGenieSelector = selector => {
  let selectorResult = undefined;
  (0, _reactRedux.useSelector)(state => {
    (0, _reactgenieDsl.setSharedState)(state);
    selectorResult = selector(state);
    return convertGenieClassToState(selectorResult);
  }, shallowEqualWithArray);
  return selectorResult;
};
exports.useGenieSelector = useGenieSelector;
function jsonifyResult(result) {
  let resultStr;
  if (result.type === "object") {
    if (result.objectType === "string" || result.objectType === "int" || result.objectType === "boolean" || result.objectType === "float") {
      resultStr = {
        value: result.value
      };
    } else if (result.objectType === "void") {
      resultStr = {
        result: "done"
      };
    } else {
      resultStr = result.value.description();
    }
  } else if (result.type === "array") {
    resultStr = result.value.map(element => jsonifyResult(element));
  }
  return resultStr;
}
function stringifyResult(result) {
  return JSON.stringify(jsonifyResult(result));
}
function executeGenieCode(command) {
  return (0, _reactgenieDsl.genieDispatch)(() => {
    console.log(`before executing state ${JSON.stringify(_reactgenieDsl.sharedState)}`);
    try {
      const result = _modalityProvider.GenieInterpreter.dslInterpreter.interpretSteps(command);
      return {
        success: true,
        results: result
      };
    } catch (e) {
      const reactGenieState = _reactgenieDsl.sharedState;
      reactGenieState.message = {
        message: "Sorry, I don't understand...",
        type: "error"
      };
      return {
        success: false,
        results: [e]
      };
    }
  });
}
function displayResult(executionResult, transcript, parsed, genieInterfaces) {
  (0, _reactgenieDsl.genieDispatch)(() => {
    let allDisplayingObjects = [];
    let displayingObject = null;
    let displayingObjectType = "";
    const result = executionResult.results;
    let lastResult = true;
    for (let i = result.length - 1; i >= 0; i--) {
      if (i != result.length - 1) {
        lastResult = false;
      }
      const step = result[i];
      allDisplayingObjects = [];
      console.log(`last executed step ${JSON.stringify(step)}`);
      const stepResult = step.result;
      if (stepResult.type === "object") {
        allDisplayingObjects.push(stepResult);
      } else if (stepResult.type === "array") {
        for (const element of stepResult.value) {
          allDisplayingObjects.push(element);
        }
      }
      // check if object can be displayed
      if (allDisplayingObjects.length === 1) {
        displayingObjectType = allDisplayingObjects[0].objectType;
        displayingObject = allDisplayingObjects[0];
      } else if (allDisplayingObjects.length > 1) {
        displayingObjectType = allDisplayingObjects[0].objectType + "[]";
        displayingObject = allDisplayingObjects;
      } else if (allDisplayingObjects.length === 0) {
        displayingObjectType = "undefined";
        displayingObject = null;
      }
      // if displayingObjectType in the keys of AllGenieObjectInterfaces
      if (_reactDecorators.AllGenieObjectInterfaces.supportedTypes.has(displayingObjectType)) {
        break;
      }
    }
    let cannotdisplay = false;
    let onScreen = true;
    let instantiatedDisplayingObject = null;
    if (displayingObject != null) {
      // if displayingObject is an array
      if (displayingObject instanceof Array) {
        // always display
        onScreen = false;
        instantiatedDisplayingObject = [];
        for (const element of displayingObject) {
          const Instance = (0, _reactDecorators.InstantiateGenieObject)({
            className: element.objectType,
            key: element.value
          });
          if (Instance === undefined) {
            cannotdisplay = true;
            break;
          }
          instantiatedDisplayingObject.push(Instance);
        }
      } else {
        const Instance = (0, _reactDecorators.InstantiateGenieObject)({
          className: displayingObject.objectType,
          key: displayingObject.value
        });
        if (Instance === undefined) cannotdisplay = true;else {
          if (lastResult) {
            // always display
            onScreen = false;
          } else {
            // check if displayingObjects is on screen already
            const targetInterface = genieInterfaces.find(genieInterface => genieInterface.className === Instance.constructor.name && (0, _reactRedux.shallowEqual)(genieInterface.key, Instance._getConstructorParams()));
            if (!targetInterface) {
              onScreen = false;
            }
          }
          instantiatedDisplayingObject = Instance;
        }
      }
    }
    _modalityProvider.GenieInterpreter.nlParser.respond(transcript, parsed, stringifyResult(
    // now we only display the last result
    executionResult.results[executionResult.results.length - 1].result)).then(result => {
      console.log(`respond result: ${result}`);
      (0, _reactgenieDsl.genieDispatch)(() => {
        if (result !== null) {
          const reactGenieState = _reactgenieDsl.sharedState;
          reactGenieState.message = {
            message: result,
            type: "info"
          };
        }
        if (!onScreen && !cannotdisplay) {
          const reactGenieState = _reactgenieDsl.sharedState;
          reactGenieState.navState = {
            objectViewClassName: _reactDecorators.AllGenieObjectInterfaces.getInterfaces(instantiatedDisplayingObject).viewClassName,
            objectConstructorParams: allDisplayingObjects.length === 1 ? allDisplayingObjects[0].value._getConstructorParams() : {
              elements: allDisplayingObjects.map(displayingObject => displayingObject.value._getConstructorParams())
            }
          };
          reactGenieState.navStack += 1;
        }
      });
    });
    console.log(`after executing state ${JSON.stringify(_reactgenieDsl.sharedState)}`);
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,