"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DateTime = void 0;
var _reactgenieDsl = require("reactgenie-dsl");
require("reflect-metadata");
var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _dec10, _dec11, _dec12, _dec13, _dec14, _dec15, _dec16, _dec17, _dec18, _dec19, _dec20, _dec21, _dec22, _dec23, _dec24, _dec25, _dec26, _dec27, _dec28, _dec29, _dec30, _dec31, _dec32, _dec33, _dec34, _dec35, _dec36, _dec37, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _class3;
function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }
function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }
function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'transform-class-properties is enabled and runs after the decorators transform.'); }
let DateTime = (_dec = (0, _reactgenieDsl.GenieClass)("Representing a date or time"), _dec2 = Reflect.metadata("design:type", Function), _dec3 = Reflect.metadata("design:paramtypes", [Object]), _dec4 = Reflect.metadata("design:destructuringparamtypes", [{
  year: Number,
  month: Number,
  day: Number,
  hour: Number,
  minute: Number,
  second: Number
}]), _dec5 = (0, _reactgenieDsl.GenieProperty)(), _dec6 = Reflect.metadata("design:type", Number), _dec7 = (0, _reactgenieDsl.GenieProperty)(), _dec8 = Reflect.metadata("design:type", Number), _dec9 = (0, _reactgenieDsl.GenieProperty)(), _dec10 = Reflect.metadata("design:type", Number), _dec11 = (0, _reactgenieDsl.GenieProperty)(), _dec12 = Reflect.metadata("design:type", String), _dec13 = (0, _reactgenieDsl.GenieProperty)(), _dec14 = Reflect.metadata("design:type", Number), _dec15 = (0, _reactgenieDsl.GenieProperty)(), _dec16 = Reflect.metadata("design:type", Number), _dec17 = (0, _reactgenieDsl.GenieProperty)(), _dec18 = Reflect.metadata("design:type", Number), _dec19 = (0, _reactgenieDsl.GenieFunction)("Get the current date time"), _dec20 = Reflect.metadata("design:type", Function), _dec21 = Reflect.metadata("design:paramtypes", []), _dec22 = Reflect.metadata("design:returntype", "DateTime"), _dec23 = Reflect.metadata("design:is_static", true), _dec24 = (0, _reactgenieDsl.GenieFunction)("Create a new date time object"), _dec25 = Reflect.metadata("design:type", Function), _dec26 = Reflect.metadata("design:paramtypes", [Object]), _dec27 = Reflect.metadata("design:returntype", "DateTime"), _dec28 = Reflect.metadata("design:destructuringparamtypes", [{
  year: Number,
  month: Number,
  day: Number,
  hour: Number,
  minute: Number
}]), _dec29 = (0, _reactgenieDsl.GenieFunction)("Add a date offset to the current date"), _dec30 = Reflect.metadata("design:type", Function), _dec31 = Reflect.metadata("design:paramtypes", [Object]), _dec32 = Reflect.metadata("design:returntype", "DateTime"), _dec33 = Reflect.metadata("design:destructuringparamtypes", [{
  year: Number,
  month: Number,
  day: Number,
  hour: Number,
  minute: Number,
  second: Number
}]), _dec34 = (0, _reactgenieDsl.GenieFunction)("Get the date of the DateTime object"), _dec35 = Reflect.metadata("design:type", Function), _dec36 = Reflect.metadata("design:paramtypes", []), _dec37 = Reflect.metadata("design:returntype", typeof Date === "undefined" ? "Date" : Date), _dec(_class = _dec2(_class = _dec3(_class = _dec4(_class = (_class2 = (_class3 = class DateTime extends _reactgenieDsl.HelperClass {
  constructor({
    year = undefined,
    month = undefined,
    day = undefined,
    hour = undefined,
    minute = undefined,
    second = undefined
  }) {
    super({});
    _initializerDefineProperty(this, "year", _descriptor, this);
    _initializerDefineProperty(this, "month", _descriptor2, this);
    _initializerDefineProperty(this, "day", _descriptor3, this);
    _initializerDefineProperty(this, "dayOfWeek", _descriptor4, this);
    _initializerDefineProperty(this, "hour", _descriptor5, this);
    _initializerDefineProperty(this, "minute", _descriptor6, this);
    _initializerDefineProperty(this, "second", _descriptor7, this);
    this.year = 0;
    this.month = 0;
    this.day = 0;
    this.hour = 0;
    this.minute = 0;
    this.second = 0;
    this.dayOfWeek = "";
    // this.setDate({year, month, day, hour, minute});
  }

  static setup() {}

  // custom comparator for sorting
  static compare(a, b) {
    return a.getDate().getTime() - b.getDate().getTime();
  }
  static fromString(data) {
    let date;
    // const dt = DateTime.CreateObject({});
    const dt = DateTime.CreateObject({});
    if (data == "today") date = new Date();else if (data == "yesterday") {
      date = new Date();
      date.setDate(date.getDate() - 1);
    } else if (data == "beforeYesterday") {
      date = new Date();
      date.setDate(date.getDate() - 1);
    } else date = new Date(data);
    dt.year = date.getFullYear();
    dt.month = date.getMonth();
    dt.day = date.getDate();
    dt.hour = date.getHours();
    dt.minute = date.getMinutes();
    dt.second = date.getSeconds();
    dt.dayOfWeek = date.toLocaleDateString("en-US", {
      weekday: "long"
    });
    return dt;
  }
  static today() {
    return DateTime.fromString("today");
  }
  CreateDatetime({
    year = undefined,
    month = undefined,
    day = undefined,
    hour = undefined,
    minute = undefined
  }) {
    return DateTime.CreateObject({
      year,
      month,
      day,
      hour,
      minute
    });
  }
  addDateOffset({
    year = 0,
    month = 0,
    day = 0,
    hour = 0,
    minute = 0,
    second = 0
  }) {
    this.year = this.year + year;
    this.month = this.month + month;
    this.day = this.day + day;
    this.hour = this.hour + hour;
    this.minute = this.minute + minute;
    this.second = this.second + second;
    return this;
  }
  getDate() {
    const date = new Date();
    date.setFullYear(this.year);
    date.setMonth(this.month);
    date.setDate(this.day);
    date.setHours(this.hour);
    date.setMinutes(this.minute);
    date.setSeconds(this.second);
    return date;
  }

  // @GenieFunction("Set the date of the date time object")

  toString() {
    return `${this.year}-${this.month}-${this.day}`;
  }
}, _class3.sunday = 0, _class3.monday = 1, _class3.tuesday = 2, _class3.wednesday = 3, _class3.thursday = 4, _class3.friday = 5, _class3.saturday = 6, _class3.Examples = [{
  user_utterance: "yesterday",
  example_parsed: "DateTime.today().addDateOffset(day: -1)"
}, {
  user_utterance: "tomorrow",
  example_parsed: "DateTime.today().addDateOffset(day: 1)"
}, {
  user_utterance: "next week",
  example_parsed: "DateTime.today().addDateOffset(day: 7)"
}], _class3), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "year", [_dec5, _dec6], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: null
}), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "month", [_dec7, _dec8], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: null
}), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "day", [_dec9, _dec10], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: null
}), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "dayOfWeek", [_dec11, _dec12], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: null
}), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "hour", [_dec13, _dec14], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: null
}), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "minute", [_dec15, _dec16], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: null
}), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "second", [_dec17, _dec18], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: null
}), _applyDecoratedDescriptor(_class2, "today", [_dec19, _dec20, _dec21, _dec22, _dec23], Object.getOwnPropertyDescriptor(_class2, "today"), _class2), _applyDecoratedDescriptor(_class2.prototype, "CreateDatetime", [_dec24, _dec25, _dec26, _dec27, _dec28], Object.getOwnPropertyDescriptor(_class2.prototype, "CreateDatetime"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "addDateOffset", [_dec29, _dec30, _dec31, _dec32, _dec33], Object.getOwnPropertyDescriptor(_class2.prototype, "addDateOffset"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "getDate", [_dec34, _dec35, _dec36, _dec37], Object.getOwnPropertyDescriptor(_class2.prototype, "getDate"), _class2.prototype)), _class2)) || _class) || _class) || _class) || _class);
exports.DateTime = DateTime;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,