"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.AllGenieObjectInterfaces = exports.AllGenieDisplayedInstances = void 0;
Object.defineProperty(exports, "AllGenieObjects", {
  enumerable: true,
  get: function () {
    return _reactgenieDsl.AllGenieObjects;
  }
});
Object.defineProperty(exports, "ClassDescriptor", {
  enumerable: true,
  get: function () {
    return _reactgenieDsl.ClassDescriptor;
  }
});
exports.ClickPoints = void 0;
Object.defineProperty(exports, "DataClass", {
  enumerable: true,
  get: function () {
    return _reactgenieDsl.DataClass;
  }
});
Object.defineProperty(exports, "FieldDescriptor", {
  enumerable: true,
  get: function () {
    return _reactgenieDsl.FieldDescriptor;
  }
});
Object.defineProperty(exports, "FuncDescriptor", {
  enumerable: true,
  get: function () {
    return _reactgenieDsl.FuncDescriptor;
  }
});
Object.defineProperty(exports, "GenieClass", {
  enumerable: true,
  get: function () {
    return _reactgenieDsl.GenieClass;
  }
});
exports.GenieClassInterface = GenieClassInterface;
Object.defineProperty(exports, "GenieFunction", {
  enumerable: true,
  get: function () {
    return _reactgenieDsl.GenieFunction;
  }
});
Object.defineProperty(exports, "GenieKey", {
  enumerable: true,
  get: function () {
    return _reactgenieDsl.GenieKey;
  }
});
Object.defineProperty(exports, "GenieProperty", {
  enumerable: true,
  get: function () {
    return _reactgenieDsl.GenieProperty;
  }
});
Object.defineProperty(exports, "HelperClass", {
  enumerable: true,
  get: function () {
    return _reactgenieDsl.HelperClass;
  }
});
exports.InstantiateGenieObject = InstantiateGenieObject;
Object.defineProperty(exports, "ParamDescriptor", {
  enumerable: true,
  get: function () {
    return _reactgenieDsl.ParamDescriptor;
  }
});
exports.RetrieveInterfaces = RetrieveInterfaces;
Object.defineProperty(exports, "float", {
  enumerable: true,
  get: function () {
    return _reactgenieDsl.float;
  }
});
exports.initReactGenie = initReactGenie;
Object.defineProperty(exports, "int", {
  enumerable: true,
  get: function () {
    return _reactgenieDsl.int;
  }
});
var _genieViewWrapper = require("./genie-view-wrapper");
var _reactgenieDsl = require("reactgenie-dsl");
var _react = _interopRequireDefault(require("react"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); } // dictionary of genie object names to genie objects
class GenieInterfacesStore {
  constructor() {
    this.supportedTypes = new Set();
    this.interfaces = {};
  }
  addInterface(element) {
    if (!this.interfaces[element.objectClassName]) {
      this.interfaces[element.objectClassName] = [];
    }
    this.interfaces[element.objectClassName].push(element);
    this.supportedTypes.add(element.objectClassName);
  }
  getObjectClassName(object) {
    if (object.constructor.name === "Array") {
      return this.getObjectClassName(object[0]) + "[]";
    }
    return object.constructor.name;
  }
  getInterfaces(object) {
    const className = this.getObjectClassName(object);
    if (this.interfaces[className]) {
      const sortedInterfaces = this.interfaces[className].sort((a, b) => {
        return b.displayPriority(object) - a.displayPriority(object);
      });
      return sortedInterfaces[0];
    }
    return null;
  }

  // key is the class name of the GenieInterfaceStoreElement, not the GenieObject
  allInterfaces() {
    const allInterfaces = {};
    for (const key in this.interfaces) {
      for (const element of this.interfaces[key]) {
        allInterfaces[element.viewClassName] = element;
      }
    }
    return allInterfaces;
  }
}
const AllGenieObjectInterfaces = new GenieInterfacesStore();
exports.AllGenieObjectInterfaces = AllGenieObjectInterfaces;
const AllGenieDisplayedInstances = {};
exports.AllGenieDisplayedInstances = AllGenieDisplayedInstances;
const ClickPoints = [];
exports.ClickPoints = ClickPoints;
function InstantiateGenieObject(objectSpec) {
  const objectClass = _reactgenieDsl.AllGenieObjects[objectSpec.className];
  return objectClass.GetObject(objectSpec.key);
}

/**
 * Get all genie class interfaces within modality provider and their rects
 * @returns {GenieInterfaceSpec[]} Retrieve all the Genie object components on the interface and their rects
 */
function RetrieveInterfaces() {
  // scan through values of AllGenieObject and get the displayedInstances
  console.log(`AllGenieObjectInterfaces ${JSON.stringify(AllGenieDisplayedInstances)}`);
  const displayedInstances = [];
  for (const key in AllGenieDisplayedInstances) {
    displayedInstances.push(AllGenieDisplayedInstances[key]());
  }
  return displayedInstances;
}
const reactGenieClassModifier = target => {
  console.log("ReactGenie Class modifier called on " + target.name);

  // append method `current()` to the class
  /**
   * Retrieves the most relevant instance of GenieObject in this context
   * @returns {any} the GenieObject
   */
  function Current() {
    const currentClassName = target.ClassDescriptor.className;
    const genieInterfaces = RetrieveInterfaces();
    if (ClickPoints.length > 0) {
      // find the genie object that is closest to the click point
      let closest = genieInterfaces[0];
      let closestDistance = Math.sqrt(Math.pow(ClickPoints[0].x - (closest.rect.x + closest.rect.width / 2), 2) + Math.pow(ClickPoints[0].y - (closest.rect.y + closest.rect.height / 2), 2));
      for (let i = 1; i < genieInterfaces.length; i++) {
        if (genieInterfaces[i].className !== currentClassName) continue;
        const distance = Math.sqrt(Math.pow(ClickPoints[0].x - (genieInterfaces[i].rect.x + genieInterfaces[i].rect.width / 2), 2) + Math.pow(ClickPoints[0].y - (genieInterfaces[i].rect.y + genieInterfaces[i].rect.height / 2), 2));
        if (distance < closestDistance) {
          closest = genieInterfaces[i];
          closestDistance = distance;
        }
      }
      return InstantiateGenieObject(closest);
    } else {
      let result = null;
      let biggestArea = 0;
      console.log(`current called with ${JSON.stringify(genieInterfaces)}`);
      for (const genieInterface of genieInterfaces) {
        if (genieInterface.className !== currentClassName) continue;
        const area = genieInterface.rect.width * genieInterface.rect.height;
        console.log();
        if (area > biggestArea) {
          result = genieInterface;
          biggestArea = area;
        }
      }
      return InstantiateGenieObject(result);
    }
  }

  // @ts-ignore
  target.Current = Current;

  // append additional function descriptor to class descriptor
  target.ClassDescriptor.functions.add(new _reactgenieDsl.FuncDescriptor("Current", [], target.ClassDescriptor.className, true));
  (0, _reactgenieDsl.genieDispatch)(() => {
    let newExamples = _reactgenieDsl.sharedState["__EXAMPLES__"] || [];
    newExamples = newExamples.concat(target.Examples);
    (0, _reactgenieDsl.setSharedState)(_objectSpread(_objectSpread({}, _reactgenieDsl.sharedState), {}, {
      ["__EXAMPLES__"]: newExamples
    }));
  });
};
function initReactGenie() {
  const reactGenieStore = (0, _reactgenieDsl.initGenie)({
    initGenieClassModifier: reactGenieClassModifier
  });
  (0, _reactgenieDsl.genieDispatch)(() => {
    const reactGenieState = _reactgenieDsl.sharedState;
    reactGenieState.navState = {
      objectViewClassName: null,
      objectConstructorParams: null
    };
    reactGenieState.navStack = 0;
    reactGenieState.message = {
      message: "",
      type: "info"
    };
  });
  return reactGenieStore;
}

/**
 *
 * @param type the type of the object being rendered by the interface
 * @param displayTitle the title of the interface, can be a function that takes in the object and returns a string
 * @param displayPriority the priority of the interface, can be a function that takes in the object and returns a number
 * @constructor
 */
function GenieClassInterface(type, displayTitle = undefined, displayPriority = 0) {
  return function (target) {
    console.log("GenieFunction decorator called on " + target.name);
    // create a function with a list of parameters
    const newTarget = (...args) => {
      return (0, _genieViewWrapper.GenieViewWrapper)(type, target, args)();
    };
    if (displayTitle === undefined) {
      displayTitle = type;
    }
    const titleFunction = typeof displayTitle === "string" ? () => displayTitle : displayTitle;
    const displayPriorityFunction = typeof displayPriority === "number" ? () => displayPriority : displayPriority;
    const newGenieInterfaceSpec = {
      objectClassName: type,
      viewClassName: target.name,
      title: titleFunction,
      function: newTarget,
      displayPriority: displayPriorityFunction
    };
    AllGenieObjectInterfaces.addInterface(newGenieInterfaceSpec);
    // add callback function with shared data structure which contains whether the element is on/off screen
    return /*#__PURE__*/_react.default.memo(newTarget);
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,