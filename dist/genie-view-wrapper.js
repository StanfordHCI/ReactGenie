"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.GenieViewWrapper = void 0;
var _react = _interopRequireWildcard(require("react"));
var _reactDecorators = require("./react-decorators");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
const GenieViewWrapper = (className, childComponent, childParams) => () => {
  const interfaceId = Math.random().toString(36).substring(2, 15) + Math.random().toString(36).substring(2, 15);
  const containerRef = (0, _react.useRef)(); // assign to the element we are observing

  (0, _react.useEffect)(() => {
    const observer = new IntersectionObserver(callback, {});
    observer.observe(containerRef.current);
    console.log(`GenieViewWrapper: ${className} ${interfaceId} created`);
    return () => {
      observer.disconnect();
      console.log(`GenieViewWrapper: ${className} ${interfaceId} destroyed`);
      delete _reactDecorators.AllGenieDisplayedInstances[interfaceId];
    };
  }, []);

  // check if dictionary has the interfaceId, if it does update that Id, if it doesn't than you add it.
  // Loop through all elements in the dictionary and check if they are visible, if they are not visible than you remove them from the dictionary.
  const callback = entries => {
    const [entry] = entries;
    console.log(`GenieViewWrapper: ${className} ${interfaceId} ${entry.isIntersecting}`);
    if (entry.isIntersecting) {
      // check if interfaceId is in the dictionary. If it is update it, if it isn't add it.
      const queryInterfaceSpec = () => {
        // @ts-ignore
        const rect = containerRef.current.getBoundingClientRect();
        return {
          className: className,
          key: childParams[0],
          rect: rect
        };
      };
      if (_reactDecorators.AllGenieDisplayedInstances[interfaceId] === undefined) {
        _reactDecorators.AllGenieDisplayedInstances[interfaceId] = queryInterfaceSpec;
      }
    } else {
      // remove self from dictionary
      delete _reactDecorators.AllGenieDisplayedInstances[interfaceId];
    }
  };
  return /*#__PURE__*/_react.default.createElement("div", {
    ref: containerRef,
    style: {
      height: "100%",
      width: "100%"
    }
  }, childComponent(...childParams));
};
exports.GenieViewWrapper = GenieViewWrapper;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZCIsInJlcXVpcmUiLCJfcmVhY3REZWNvcmF0b3JzIiwiX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlIiwibm9kZUludGVyb3AiLCJXZWFrTWFwIiwiY2FjaGVCYWJlbEludGVyb3AiLCJjYWNoZU5vZGVJbnRlcm9wIiwib2JqIiwiX19lc01vZHVsZSIsImRlZmF1bHQiLCJjYWNoZSIsImhhcyIsImdldCIsIm5ld09iaiIsImhhc1Byb3BlcnR5RGVzY3JpcHRvciIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwia2V5IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwiZGVzYyIsInNldCIsIkdlbmllVmlld1dyYXBwZXIiLCJjbGFzc05hbWUiLCJjaGlsZENvbXBvbmVudCIsImNoaWxkUGFyYW1zIiwiaW50ZXJmYWNlSWQiLCJNYXRoIiwicmFuZG9tIiwidG9TdHJpbmciLCJzdWJzdHJpbmciLCJjb250YWluZXJSZWYiLCJ1c2VSZWYiLCJ1c2VFZmZlY3QiLCJvYnNlcnZlciIsIkludGVyc2VjdGlvbk9ic2VydmVyIiwiY2FsbGJhY2siLCJvYnNlcnZlIiwiY3VycmVudCIsImNvbnNvbGUiLCJsb2ciLCJkaXNjb25uZWN0IiwiQWxsR2VuaWVEaXNwbGF5ZWRJbnN0YW5jZXMiLCJlbnRyaWVzIiwiZW50cnkiLCJpc0ludGVyc2VjdGluZyIsInF1ZXJ5SW50ZXJmYWNlU3BlYyIsInJlY3QiLCJnZXRCb3VuZGluZ0NsaWVudFJlY3QiLCJ1bmRlZmluZWQiLCJjcmVhdGVFbGVtZW50IiwicmVmIiwic3R5bGUiLCJoZWlnaHQiLCJ3aWR0aCIsImV4cG9ydHMiXSwic291cmNlcyI6WyIuLi9zcmMvZ2VuaWUtdmlldy13cmFwcGVyLnRzeCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QsIHsgdXNlRWZmZWN0LCB1c2VSZWYgfSBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCB7IEFsbEdlbmllRGlzcGxheWVkSW5zdGFuY2VzIH0gZnJvbSBcIi4vcmVhY3QtZGVjb3JhdG9yc1wiO1xuXG5leHBvcnQgY29uc3QgR2VuaWVWaWV3V3JhcHBlciA9XG4gIChjbGFzc05hbWU6IHN0cmluZywgY2hpbGRDb21wb25lbnQ6IGFueSwgY2hpbGRQYXJhbXM6IGFueVtdKSA9PiAoKSA9PiB7XG4gICAgY29uc3QgaW50ZXJmYWNlSWQgPVxuICAgICAgTWF0aC5yYW5kb20oKS50b1N0cmluZygzNikuc3Vic3RyaW5nKDIsIDE1KSArXG4gICAgICBNYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDM2KS5zdWJzdHJpbmcoMiwgMTUpO1xuICAgIGNvbnN0IGNvbnRhaW5lclJlZiA9IHVzZVJlZigpOyAvLyBhc3NpZ24gdG8gdGhlIGVsZW1lbnQgd2UgYXJlIG9ic2VydmluZ1xuXG4gICAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICAgIGNvbnN0IG9ic2VydmVyID0gbmV3IEludGVyc2VjdGlvbk9ic2VydmVyKGNhbGxiYWNrLCB7fSk7XG4gICAgICBvYnNlcnZlci5vYnNlcnZlKGNvbnRhaW5lclJlZi5jdXJyZW50KTtcbiAgICAgIGNvbnNvbGUubG9nKGBHZW5pZVZpZXdXcmFwcGVyOiAke2NsYXNzTmFtZX0gJHtpbnRlcmZhY2VJZH0gY3JlYXRlZGApO1xuICAgICAgcmV0dXJuICgpID0+IHtcbiAgICAgICAgb2JzZXJ2ZXIuZGlzY29ubmVjdCgpO1xuICAgICAgICBjb25zb2xlLmxvZyhgR2VuaWVWaWV3V3JhcHBlcjogJHtjbGFzc05hbWV9ICR7aW50ZXJmYWNlSWR9IGRlc3Ryb3llZGApO1xuICAgICAgICBkZWxldGUgQWxsR2VuaWVEaXNwbGF5ZWRJbnN0YW5jZXNbaW50ZXJmYWNlSWRdO1xuICAgICAgfTtcbiAgICB9LCBbXSk7XG5cbiAgICAvLyBjaGVjayBpZiBkaWN0aW9uYXJ5IGhhcyB0aGUgaW50ZXJmYWNlSWQsIGlmIGl0IGRvZXMgdXBkYXRlIHRoYXQgSWQsIGlmIGl0IGRvZXNuJ3QgdGhhbiB5b3UgYWRkIGl0LlxuICAgIC8vIExvb3AgdGhyb3VnaCBhbGwgZWxlbWVudHMgaW4gdGhlIGRpY3Rpb25hcnkgYW5kIGNoZWNrIGlmIHRoZXkgYXJlIHZpc2libGUsIGlmIHRoZXkgYXJlIG5vdCB2aXNpYmxlIHRoYW4geW91IHJlbW92ZSB0aGVtIGZyb20gdGhlIGRpY3Rpb25hcnkuXG4gICAgY29uc3QgY2FsbGJhY2sgPSAoZW50cmllcykgPT4ge1xuICAgICAgY29uc3QgW2VudHJ5XSA9IGVudHJpZXM7XG4gICAgICBjb25zb2xlLmxvZyhcbiAgICAgICAgYEdlbmllVmlld1dyYXBwZXI6ICR7Y2xhc3NOYW1lfSAke2ludGVyZmFjZUlkfSAke2VudHJ5LmlzSW50ZXJzZWN0aW5nfWBcbiAgICAgICk7XG4gICAgICBpZiAoZW50cnkuaXNJbnRlcnNlY3RpbmcpIHtcbiAgICAgICAgLy8gY2hlY2sgaWYgaW50ZXJmYWNlSWQgaXMgaW4gdGhlIGRpY3Rpb25hcnkuIElmIGl0IGlzIHVwZGF0ZSBpdCwgaWYgaXQgaXNuJ3QgYWRkIGl0LlxuICAgICAgICBjb25zdCBxdWVyeUludGVyZmFjZVNwZWMgPSAoKSA9PiB7XG4gICAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICAgIGNvbnN0IHJlY3QgPSBjb250YWluZXJSZWYuY3VycmVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgY2xhc3NOYW1lOiBjbGFzc05hbWUsXG4gICAgICAgICAgICBrZXk6IGNoaWxkUGFyYW1zWzBdLFxuICAgICAgICAgICAgcmVjdDogcmVjdCxcbiAgICAgICAgICB9O1xuICAgICAgICB9O1xuICAgICAgICBpZiAoQWxsR2VuaWVEaXNwbGF5ZWRJbnN0YW5jZXNbaW50ZXJmYWNlSWRdID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICBBbGxHZW5pZURpc3BsYXllZEluc3RhbmNlc1tpbnRlcmZhY2VJZF0gPSBxdWVyeUludGVyZmFjZVNwZWM7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIHJlbW92ZSBzZWxmIGZyb20gZGljdGlvbmFyeVxuICAgICAgICBkZWxldGUgQWxsR2VuaWVEaXNwbGF5ZWRJbnN0YW5jZXNbaW50ZXJmYWNlSWRdO1xuICAgICAgfVxuICAgIH07XG5cbiAgICByZXR1cm4gKFxuICAgICAgPGRpdiByZWY9e2NvbnRhaW5lclJlZn0gc3R5bGU9e3sgaGVpZ2h0OiBcIjEwMCVcIiwgd2lkdGg6IFwiMTAwJVwiIH19PlxuICAgICAgICB7Y2hpbGRDb21wb25lbnQoLi4uY2hpbGRQYXJhbXMpfVxuICAgICAgPC9kaXY+XG4gICAgKTtcbiAgfTtcbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEsSUFBQUEsTUFBQSxHQUFBQyx1QkFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQUMsZ0JBQUEsR0FBQUQsT0FBQTtBQUFnRSxTQUFBRSx5QkFBQUMsV0FBQSxlQUFBQyxPQUFBLGtDQUFBQyxpQkFBQSxPQUFBRCxPQUFBLFFBQUFFLGdCQUFBLE9BQUFGLE9BQUEsWUFBQUYsd0JBQUEsWUFBQUEsQ0FBQUMsV0FBQSxXQUFBQSxXQUFBLEdBQUFHLGdCQUFBLEdBQUFELGlCQUFBLEtBQUFGLFdBQUE7QUFBQSxTQUFBSix3QkFBQVEsR0FBQSxFQUFBSixXQUFBLFNBQUFBLFdBQUEsSUFBQUksR0FBQSxJQUFBQSxHQUFBLENBQUFDLFVBQUEsV0FBQUQsR0FBQSxRQUFBQSxHQUFBLG9CQUFBQSxHQUFBLHdCQUFBQSxHQUFBLDRCQUFBRSxPQUFBLEVBQUFGLEdBQUEsVUFBQUcsS0FBQSxHQUFBUix3QkFBQSxDQUFBQyxXQUFBLE9BQUFPLEtBQUEsSUFBQUEsS0FBQSxDQUFBQyxHQUFBLENBQUFKLEdBQUEsWUFBQUcsS0FBQSxDQUFBRSxHQUFBLENBQUFMLEdBQUEsU0FBQU0sTUFBQSxXQUFBQyxxQkFBQSxHQUFBQyxNQUFBLENBQUFDLGNBQUEsSUFBQUQsTUFBQSxDQUFBRSx3QkFBQSxXQUFBQyxH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