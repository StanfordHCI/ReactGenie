"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ModalityProvider = exports.ListenerStateEnum = exports.GenieInterpreter = void 0;
var _react = _interopRequireWildcard(require("react"));
var _reactRedux = require("react-redux");
var _native = require("@react-navigation/native");
var _stack = require("@react-navigation/stack");
var _speechRecognition = require("./speech-recognition");
var _core = require("@react-native-material/core");
var _reactgenieDsl = require("reactgenie-dsl");
var _reactDecorators = require("./react-decorators");
var _sharedStore = require("./shared-store");
var _reactNative = require("react-native");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
const Stack = (0, _stack.createStackNavigator)();
let GenieInterpreter;
exports.GenieInterpreter = GenieInterpreter;
const DefaultScreen = children => ({
  navigation
}) => {
  (0, _react.useEffect)(() => {
    navigation.setOptions({
      headerShown: false
    });
  }, []);
  return children;
};
const ObjectInterfaceScreen = genieInterfaceStoreElement => ({
  route,
  navigation
}) => {
  const title = genieInterfaceStoreElement.title(route.params);
  (0, _react.useEffect)(() => {
    navigation.setOptions({
      headerShown: true
    });
    navigation.setOptions({
      title: title
    });
  }, []);
  return /*#__PURE__*/_react.default.createElement(genieInterfaceStoreElement.function, route.params);
};
const cardStyle = {
  presentation: "card",
  animationEnabled: true,
  headerStyleInterpolator: _stack.HeaderStyleInterpolators.forUIKit,
  cardStyleInterpolator: _stack.CardStyleInterpolators.forHorizontalIOS
};
let ListenerStateEnum = /*#__PURE__*/function (ListenerStateEnum) {
  ListenerStateEnum[ListenerStateEnum["Idle"] = 0] = "Idle";
  ListenerStateEnum[ListenerStateEnum["Listening"] = 1] = "Listening";
  ListenerStateEnum[ListenerStateEnum["Processing"] = 2] = "Processing";
  return ListenerStateEnum;
}({}); // Done,
exports.ListenerStateEnum = ListenerStateEnum;
const ModalityProvider = props => {
  const examples = (0, _sharedStore.useGenieSelector)(() => {
    if (props.examples === undefined) {
      return _reactgenieDsl.sharedState["__EXAMPLES__"];
    } else {
      return props.examples.concat(_reactgenieDsl.sharedState["__EXAMPLES__"]);
    }
  });
  const navState = (0, _reactRedux.useSelector)(state => {
    return state.navState;
  });
  const navStack = (0, _reactRedux.useSelector)(state => {
    return state.navStack;
  });
  const voiceMessage = (0, _reactRedux.useSelector)(state => {
    return state.message;
  });
  const [snackbarVisible, setSnackbarVisible] = (0, _react.useState)(false);
  (0, _react.useEffect)(() => {
    if (voiceMessage !== null && voiceMessage !== undefined && voiceMessage.message != "") {
      setSnackbarVisible(true);
      setTimeout(() => {
        setSnackbarVisible(false);
      }, 3000);
    }
  }, [voiceMessage]);
  exports.GenieInterpreter = GenieInterpreter = (0, _react.useMemo)(() => {
    const descriptors = [];
    for (const key in _reactDecorators.AllGenieObjects) {
      descriptors.push(_reactDecorators.AllGenieObjects[key].ClassDescriptor);
    }
    return new _reactgenieDsl.NlInterpreter(descriptors, props.codexApiKey, undefined, examples, props.extraPrompt, props.codexApiBaseUrl);
  }, [props.codexApiKey, examples]);

  //create ref to NavigationContainer with type
  const navigationRef = (0, _native.useNavigationContainerRef)();
  (0, _react.useEffect)(() => {
    console.log("nav state changed", navState);
    if (navState.objectViewClassName !== null) {
      navigationRef.dispatch(_native.StackActions.push(navState.objectViewClassName, navState.objectConstructorParams));
    }
  }, [navStack]);
  const uiList = (0, _react.useMemo)(() => {
    const uiList = [];
    const allInterfaces = _reactDecorators.AllGenieObjectInterfaces.allInterfaces();
    for (const key in allInterfaces) {
      const interfacesStoreElement = allInterfaces[key];
      uiList.push( /*#__PURE__*/_react.default.createElement(Stack.Screen, {
        key: key,
        name: key,
        component: ObjectInterfaceScreen(interfacesStoreElement),
        options: cardStyle
      }));
    }
    return uiList;
  }, []);
  const gui = (0, _react.useMemo)(() => /*#__PURE__*/_react.default.createElement(_native.NavigationContainer, {
    ref: navigationRef
  }, /*#__PURE__*/_react.default.createElement(Stack.Navigator, {
    initialRouteName: "Default GUI"
  }, /*#__PURE__*/_react.default.createElement(Stack.Screen, {
    name: "Default GUI",
    key: "Default GUI",
    component: DefaultScreen(props.children),
    options: cardStyle
  }), uiList)), []);
  const [listenerState, setListenerState] = (0, _react.useState)(ListenerStateEnum.Idle);
  const [shouldListen, setShouldListen] = (0, _react.useState)(false);
  const [transcript, setTranscript] = (0, _react.useState)("");
  const [interimTranscript, setInterimTranscript] = (0, _react.useState)("");
  const [mouseDown, setMouseDown] = (0, _react.useState)(false);
  (0, _react.useEffect)(() => {
    console.log("listener state changed", listenerState);
    setShouldListen(listenerState === ListenerStateEnum.Listening);
  }, [listenerState]);
  const handleClick = event => {
    if (listenerState === ListenerStateEnum.Listening) {
      const x = event.clientX;
      const y = event.clientY;
      console.log(`Click position: (${x}, ${y})`);
      _reactDecorators.ClickPoints.push({
        x: x,
        y: y
      });
    }
    setMouseDown(false);
  };
  const handleDown = () => {
    setMouseDown(true);
  };
  const speechStatusCallback = (status, interimTranscript) => {
    if (listenerState === ListenerStateEnum.Listening) {
      console.log(`Speech status: ${status}`);
      if (status == true) {
        console.log(`Interim transcript: ${interimTranscript}`);
        setInterimTranscript(interimTranscript);
      }
    }
  };
  const speechResultCallback = finalTranscript => {
    if (listenerState === ListenerStateEnum.Listening) {
      console.log(`Final transcript: ${finalTranscript}`);
      setInterimTranscript(finalTranscript);
      setTranscript(finalTranscript);
    }
  };
  let lastTranscript = "";
  (0, _react.useEffect)(() => {
    if (transcript !== "" && listenerState === ListenerStateEnum.Listening) {
      lastTranscript = transcript;
      (0, _reactDecorators.RetrieveInterfaces)();
      setListenerState(ListenerStateEnum.Processing);
      setTranscript("");
      GenieInterpreter.nlParser.parse(lastTranscript).then(result => {
        console.log(`parsed result: ${result}`);
        setInterimTranscript("");
        setListenerState(ListenerStateEnum.Idle);
        const genieInterfaces = (0, _reactDecorators.RetrieveInterfaces)();
        const executionResult = (0, _sharedStore.executeGenieCode)(result);
        if (executionResult.success) {
          (0, _sharedStore.displayResult)(executionResult, lastTranscript, result, genieInterfaces);
        }
        _reactDecorators.ClickPoints.splice(0, _reactDecorators.ClickPoints.length);
      });
    }
  }, [transcript]);
  return /*#__PURE__*/_react.default.createElement(_reactNative.View, {
    style: {
      flex: 1
    }
  }, (listenerState === ListenerStateEnum.Listening || listenerState === ListenerStateEnum.Processing) && /*#__PURE__*/_react.default.createElement("div", {
    onMouseDown: handleDown,
    onClick: handleClick,
    style: {
      position: "fixed",
      top: 0,
      left: 0,
      backgroundColor: mouseDown ? "#7f7f7f" : "#cccccc",
      width: "100%",
      height: "100%",
      zIndex: 3,
      opacity: 0.5
    }
  }, listenerState === ListenerStateEnum.Processing && /*#__PURE__*/_react.default.createElement("div", {
    style: {
      position: "absolute",
      top: "50%",
      left: "50%",
      transform: "translate(-50%, -50%)",
      backgroundColor: "#ffffff",
      padding: "10px",
      borderRadius: "10px",
      boxShadow: "0 0 10px #000000"
    }
  }, /*#__PURE__*/_react.default.createElement(_reactNative.ActivityIndicator, {
    size: "large",
    color: "#888888"
  })), props.displayTranscript && /*#__PURE__*/_react.default.createElement("div", {
    style: {
      position: "absolute",
      bottom: "10%",
      left: "50%",
      transform: "translate(-50%, -50%)",
      backgroundColor: "#ffffff",
      padding: "10px",
      borderRadius: "10px",
      boxShadow: "0 0 10px #000000",
      fontSize: "20px"
    }
  }, interimTranscript)), /*#__PURE__*/_react.default.createElement("div", {
    style: {
      position: "fixed",
      bottom: "50px",
      right: "10px",
      zIndex: 4
    }
  }, /*#__PURE__*/_react.default.createElement(_reactNative.TouchableOpacity, {
    onPress: () => {
      if (listenerState === ListenerStateEnum.Idle) {
        setListenerState(ListenerStateEnum.Listening);
      } else if (listenerState === ListenerStateEnum.Listening) {
        setShouldListen(false);
      }
    }
  }, /*#__PURE__*/_react.default.createElement(_reactNative.View, {
    style: {
      width: 50,
      height: 50,
      borderRadius: 25,
      backgroundColor: listenerState === ListenerStateEnum.Listening ? "#0000ff" : "#cccccc",
      justifyContent: "center",
      alignItems: "center"
    }
  }))), /*#__PURE__*/_react.default.createElement(_speechRecognition.SpeechRecognizer, {
    speechStatusCallback: speechStatusCallback,
    speechResultCallback: speechResultCallback,
    shouldListen: shouldListen,
    azureSpeechRegion: props.azureSpeechRegion,
    azureSpeechKey: props.azureSpeechKey
  }), gui, snackbarVisible && /*#__PURE__*/_react.default.createElement(_core.Snackbar, {
    message: voiceMessage.message,
    style: {
      position: "absolute",
      start: 16,
      end: 16,
      bottom: 100,
      backgroundColor: voiceMessage.type === "error" ? "#ff0000" : "#000000"
    }
  }));
};
exports.ModalityProvider = ModalityProvider;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,